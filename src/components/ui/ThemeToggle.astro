---
// Electrical switch style ThemeToggle component for Tailwind v4
---

<div class="relative">
  <button
    id="theme-toggle"
    class="group relative w-16 h-8 bg-gray-300 dark:bg-gray-600 rounded-full shadow-inner border-2 border-gray-400 dark:border-gray-500 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
    aria-label="Switch theme"
    role="switch"
    aria-checked="false"
  >
    <!-- Switch track background -->
    <div class="absolute inset-0 rounded-full bg-gradient-to-r from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600"></div>
    
    <!-- Switch knob -->
    <div class="absolute top-0.5 left-0.5 w-6 h-6 bg-white dark:bg-gray-200 rounded-full shadow-lg transition-all duration-300 transform dark:translate-x-8 flex items-center justify-center">
      <!-- Sun icon (visible in light mode) -->
      <i class="fas fa-sun text-yellow-500 text-xs opacity-100 dark:opacity-0 transition-all duration-300"></i>
      
      <!-- Moon icon (visible in dark mode) -->
      <i class="fas fa-moon text-gray-600 text-xs absolute opacity-0 dark:opacity-100 transition-all duration-300"></i>
    </div>
    
    <!-- Switch labels -->
    <div class="absolute inset-0 flex items-center justify-between px-2 pointer-events-none">
      <span class="text-xs font-medium text-gray-600 dark:text-gray-400 opacity-100 dark:opacity-50 transition-opacity duration-300">☀</span>
      <span class="text-xs font-medium text-gray-400 dark:text-gray-300 opacity-50 dark:opacity-100 transition-opacity duration-300">☽</span>
    </div>
  </button>
</div>

<script>
  class ThemeToggle {
    constructor() {
      this.button = document.getElementById('theme-toggle');
      this.currentTheme = this.getInitialTheme();
      
      this.init();
    }
    
    getInitialTheme() {
      // Use the theme already set by Layout.astro
      return window.__initialTheme || document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    }
    
    init() {
      if (!this.button) {
        console.error('Theme toggle button not found');
        return;
      }
      
      this.updateButtonState();
      this.button.addEventListener('click', () => this.toggleTheme());
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          const newTheme = e.matches ? 'dark' : 'light';
          this.setTheme(newTheme);
        }
      });
    }
    
    toggleTheme() {
      const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
      this.setTheme(newTheme);
    }
    
    setTheme(theme) {
      this.currentTheme = theme;
      localStorage.setItem('theme', theme);
      
      // Update DOM - Tailwind v4 handles the rest automatically
      document.documentElement.classList.remove('dark', 'light');
      document.documentElement.classList.add(theme);
      document.documentElement.setAttribute('data-theme', theme);
      
      // Update button state
      this.updateButtonState();
    }
    
    updateButtonState() {
      // Update aria-label and aria-checked for accessibility
      this.button.setAttribute('aria-label', `Switch to ${this.currentTheme === 'light' ? 'dark' : 'light'} theme`);
      this.button.setAttribute('aria-checked', this.currentTheme === 'dark' ? 'true' : 'false');
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ThemeToggle();
    });
  } else {
    new ThemeToggle();
  }
</script>
