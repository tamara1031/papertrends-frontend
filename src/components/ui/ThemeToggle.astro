---
// Simplified ThemeToggle component for Tailwind v4
---

<button
  id="theme-toggle"
  class="group relative inline-flex items-center justify-center w-11 h-11 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 hover:scale-105 shadow-sm hover:shadow-md"
  aria-label="Switch theme"
>
  <!-- Sun icon (visible in dark mode) -->
  <i class="fas fa-sun text-yellow-500 text-lg absolute opacity-0 dark:opacity-100 transition-all duration-300 transform rotate-0 dark:rotate-180"></i>
  
  <!-- Moon icon (visible in light mode) -->
  <i class="fas fa-moon text-gray-600 dark:text-gray-300 text-lg absolute opacity-100 dark:opacity-0 transition-all duration-300 transform rotate-0 dark:-rotate-180"></i>
</button>

<script>
  class ThemeToggle {
    constructor() {
      this.button = document.getElementById('theme-toggle');
      this.currentTheme = this.getInitialTheme();
      
      this.init();
    }
    
    getInitialTheme() {
      // Use the theme already set by Layout.astro
      return window.__initialTheme || document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    }
    
    init() {
      if (!this.button) {
        console.error('Theme toggle button not found');
        return;
      }
      
      this.updateButtonState();
      this.button.addEventListener('click', () => this.toggleTheme());
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          const newTheme = e.matches ? 'dark' : 'light';
          this.setTheme(newTheme);
        }
      });
    }
    
    toggleTheme() {
      const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
      this.setTheme(newTheme);
    }
    
    setTheme(theme) {
      this.currentTheme = theme;
      localStorage.setItem('theme', theme);
      
      // Update DOM - Tailwind v4 handles the rest automatically
      document.documentElement.classList.remove('dark', 'light');
      document.documentElement.classList.add(theme);
      document.documentElement.setAttribute('data-theme', theme);
      
      // Update button state
      this.updateButtonState();
    }
    
    updateButtonState() {
      // Update aria-label
      this.button.setAttribute('aria-label', `Switch to ${this.currentTheme === 'light' ? 'dark' : 'light'} theme`);
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ThemeToggle();
    });
  } else {
    new ThemeToggle();
  }
</script>
